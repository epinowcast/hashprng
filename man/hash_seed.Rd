% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hashprng.R
\name{hash_seed}
\alias{hash_seed}
\alias{hash_salt}
\title{Hash-Based Matching Pseudo-Random Number Generation}
\usage{
hash_seed(salt, ...)

hash_salt(salt, ...)
}
\arguments{
\item{salt}{the matching value for a particular collection of simulations}

\item{...}{distinguishing features to identify the event; see details.}
}
\description{
Hash-Based Matching Pseudo-Random Number Generation
}
\details{
These functions provide convenient invocation for hash-based matching
pseudo-random generation (HBM-PRNG).

\code{hash_seed} uses a \code{salt} value along with distinguishing features of an event.
Typically, \code{salt} distinguishes an overall sample simulation, but it can also
be a temporarily computed value for events that share some-but-not all
features.

\code{hash_salt} computes a \emph{partial} hash, for when several events need draws,
but share a partially consistent feature set. The result of \code{hash_salt}
can for the consistent features can be computed once, then provided to
\code{hash_seed} along with remaining distinct features.

For matched stochastic simulation, we desire a few properties:
\itemize{
\item the \emph{same} random events are resolved \emph{consistently}
\item possibility of different stochastic samples
\item reproducibility of pseudo-random simulations
}

Traditional PRNG seeding provides the latter points. To the extent that the
PRNG is traversed the same way across simulations, events will also be
resolved consistently. However, once event resolution leads to diverging
outcomes (the whole point of doing otherwise-matched simulations with some
parameter varying), the overall trajectory of the simulation will be begin
to exercise the PRNG differently. When \emph{different} events occur between the
samples, this does not matter - one random deviate is as good as another.
However, diverging trajectories can still share some of the same events.
These events should be resolved \emph{consistently}: for example, if a
probabilistic threshold is increasing across scenarios, then a particular
event testing that should only change from pass to fail. In practice, this
means that same events need have the same PRNG draws, which is not possible
if the PRNG state has otherwise diverged due to other parts of the
simulation.

The HBM PRNG approach encodes events such that when they are the same (as
defined by the simulation), they create identical hashes, which are then used
to set the PRNG state. This ensure the same subsequent draws for that event.
}
\examples{

salt <- 8675309
evt <- list(type = "infection", from = 1, to = 2, time = 3.1)
evt2 <- list(type = "recovery", from = 1, to = 2, time = 3.1)
salt |> hash_seed(evt$type, evt$from, evt$to, evt$time)
print(runif(10))
print(runif(10))
salt |> hash_seed(evt$type, evt$from, evt$to, evt$time)
print(runif(10))
salt <- 42
salt |> hash_seed(evt$type, evt$from, evt$to, evt$time)
print(runif(10))
}
