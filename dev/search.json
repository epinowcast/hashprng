[{"path":[]},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement contact@samabbott.co.uk. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"hashprng.epinowcast.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Development community effort, welcome participation. details forms contribution please see community contribution page.","code":""},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":"community","dir":"","previous_headings":"","what":"Community","title":"Contributing","text":"hold monthly community call discuss package development, research questions, developments literature. also run slack community additional development discussion takes places. welcome new comers, please contact package author invite.","code":""},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"participating project, agree abide code conduct.","code":""},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":"discussions","dir":"","previous_headings":"","what":"Discussions","title":"Contributing","text":"https://community.epinowcast.org, can post general questions, brainstorm ideas, ask help.","code":""},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"https://github.com/epinowcast/epinowcast/issues bug reports, performance issues, maintenance tasks, feature requests. post, please abide following guidelines. posting new issue, please take moment search existing similar issues order avoid duplication. bug reports: can, please install latest GitHub version hashprng (.e. remotes::install_github(\"epinowcast/hashprng\")) verify issue still persists. Describe issue prose clearly concisely possible. problem identify, post minimal reproducible example like one contributors authors can troubleshoot. reproducible example : Runnable: post enough R code data onlooker can create error computer. Minimal: reduce runtime wherever possible remove complicated details irrelevant issue hand. Readable: format code according tidyverse style guide.","code":""},{"path":[]},{"path":"hashprng.epinowcast.org/dev/CONTRIBUTING.html","id":"contributions","dir":"","previous_headings":"Development","what":"Contributions","title":"Contributing","text":"External code contributions extremely helpful appreciated. recommended steps. Prior contribution, please propose idea new issue thread reviewer can define intent scope work. Fork repository. Follow GitHub flow create new branch, add commits, open pull request. Discuss code reviewer pull request thread. everything looks good, reviewer merge code project. Please also follow additional guidelines. Respect architecture reasoning package. Depending scope work, may want read design documents (package vignettes). possible, keep contributions small enough easily review manually. okay split work multiple pull requests. Format code tidyverse style guide. Automatic tidyverse styling can achieved running styler::style_pkg() styler (rewrites files) lintr::lint_package() lintr (provides list complaints resolve). Note: styler::style_pkg() examine roxygen content .e. @examples need check manually. Check code coverage covr::package_coverage(). Automated tests cover new changed functionality pull request. Run overall package checks devtools::check() goodpractice::gp() Describe contribution project’s NEWS.md file. sure mention relevant GitHub issue numbers GitHub name done existing news entries. feel contribution substantial enough author contributor status, please add Authors@R field DESCRIPTION file. general, consider contribution sufficient contributor status several minor single major contributions sufficient author status. planning writing paper similar package extension please note contribution feel free suggest like managed.","code":""},{"path":"hashprng.epinowcast.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hashprng authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"hashprng.epinowcast.org/dev/LICENSE.html","id":"murmurhash3","dir":"","previous_headings":"","what":"MurmurHash3","title":"MIT License","text":"MurmurHash3 written Austin Appleby, placed public domain. Austin Appleby disclaims copyright source code. hashprng authors copyright include claims MurmurHash3. Rcpp-based adaptation MurmurHash3 placed public domain.","code":""},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Hash-based Matched Pseudo-Random Number Generation","text":"vignette demonstrates practical use hashprng::hash_seed; want detailed explanation use approach, read paper associated package citation: (TODO). Briefly, hash-based matched pseudo-random number generation (HBM-PRNG) can ensure “events” across different simulation scenarios resolved consistently, also still permitting stochastic simulation, incurring minimal additional computational overhead. Matched samples can analyzed pair-wise, leading higher resolution calculation overall impact cross-scenario varying features. However, researchers still need specify constitutes “” event, terms features hashed implement model structure. vignette, focus use hashprng::hash_seed, using two different implementations model world two different definitions “” events.","code":""},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"standards-of-matching","dir":"Articles","previous_headings":"","what":"Standards of Matching","title":"Hash-based Matched Pseudo-Random Number Generation","text":"Throughout vignette consider matching regimes: Non-matched (NON): equivalent drawing item random process one --slightly-perturbed process comparing . Note: kind simulation still seeded, ensure reproducibile PRNG. Seed-Matched-(SMO): scheme ensures compared runs PRNG seeding. can guarantee, example, history leading intervention . However, generally simulation trajectory diverges, PRNG exercised differently, events runs guaranteed see PRNG draws. Fully-Event-Matched (FEM): scheme ensures compared runs identical events resolved consistently. event occurs simulations gets draw PRNG. Hash-based matched (HBM) PRNG approach acheiving FEM simulations. alternatives, example managing multiple PRNGs precomputing possible outcomes. general, HBM imposes guaranteed--low computational cost, scaling number PRNG draws given simulation, minimal implementation burden modeller. ’ll making comparisons across NON, SMO, HBM terms implementation, compute cost, calculation resolution.","code":""},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"model-world-and-scenario","dir":"Articles","previous_headings":"","what":"Model World and Scenario","title":"Hash-based Matched Pseudo-Random Number Generation","text":"’ll considering infectious disease system Susceptible-Infectious- Removed variety intervention , delay initial infection introduction, portion population spontaneously moved R (representing e.g. reactive vaccination campaign).","code":""},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"model-implementation","dir":"Articles","previous_headings":"","what":"Model Implementation","title":"Hash-based Matched Pseudo-Random Number Generation","text":"’ll implement model terms discrete time steps, discrete individuals, event probabilities. time step: ’ll consider infectious individuals exposing contact susceptible individuals - converts S end step. ’ll consider infectious individuals recover - R. ’s time move, ’ll consider susceptible individuals remove - S R. essentially perturbation classic Reed-Frost model, modification people may infectious single time step ( well introducing intervention). ’re also going implement model two ways, switch whether use hash-based matching random number draws. ’ll flip switch show matching-vs-changes conclusions comparing across scenarios, well measure resource cost associated higher resolution measurement. ’ll also create setup seed set NON comparison. element need finally specify model constitutes event. ’re going offer two definitions explore consequences. two definitions hinge whether model’s discrete individuals identity . individuals identity, events distinguished involved. , events distinguished .","code":"# define some variables to differentiate between individual states # for the non-identity model, these will be compartment indices # for the identity model, these are individual states susceptible <- 1L infectious <- 2L removed <- 3L"},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"non-identity-model-implementation","dir":"Articles","previous_headings":"Model Implementation","what":"Non-Identity Model Implementation","title":"Hash-based Matched Pseudo-Random Number Generation","text":"non-identity model, assume time step size relative populations determine event outcomes, e.g. many people infected. can accomplish drawing binomial distribution. HBM, need match time event. since () three draws per step, always occurring order, can simply match time quantile draws. assuming runif always advances underlying PRNG state number deviates requested, rbinom might advance state variable amount depending parameters state, hence need draw quantiles invert outcomes. N.B. ?rbinom indicates draws done per “Kachitvichyanukul, V. Schmeiser, B. W. (1988) Binomial random variate generation. Communications ACM, 31, 216–222”, describes algorithm BPTE indeed draw uniform deviates variable number times per binomial draw, depending \\(n\\) \\(p\\) arguments.","code":"#' @param t an integer scalar, the simulation time #' @param y an integer vector, the current counts of individuals in S, I, and R #' @param parameters a list, `transmission_p`, `recovery_p`, `vaccination_p`, #'   and `vax_t` #' @param seed optional; if non-null, using HBM nonidentity_dStep <- function(t, y, parameters, seed = NULL) {   with(parameters, {     # extract the S, I population counts     Ninf <- y[infectious]     Nsus <- y[susceptible]      # if we are matching events     if (!is.null(seed)) {       # draw the same quantiles for each when       hash_seed(seed, t)       evtqs <- runif(2)       # convert these to the outcomes       newinf <- qbinom(evtqs[1], Nsus, 1 - (1 - transmission_p)^Ninf)       newrem <- qbinom(evtqs[2], Ninf, recovery_p)     } else { # simply make the binomial draws       newinf <- rbinom(1, Nsus, 1 - (1 - transmission_p)^Ninf)       newrem <- rbinom(1, Ninf, recovery_p)     }      # move infectees S -> I, recoveries I -> R     dY <- c(S = -newinf, I = newinf - newrem, R = newrem)      if (t == vax_t) {       if (!is.null(seed)) {         # n.b. still on a consistent PRNG state for this time, so can just draw         newvax <- qbinom(runif(1), Nsus - newinf, vaccination_p)       } else {         newvax <- rbinom(1, Nsus - newinf, vaccination_p)       }       # move vaccinees       dY[susceptible] <- dY[susceptible] - newvax       dY[removed] <- dY[removed] + newvax     }      # return the overall state change, as well as new incidence     return(list(dY, newinf))   }) }"},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"higher-resolution-implementation","dir":"Articles","previous_headings":"Model Implementation","what":"Higher Resolution Implementation","title":"Hash-based Matched Pseudo-Random Number Generation","text":"identity based model, assume particularly gets infected vaccinated matters. Thus, HBM need hash infection recovery. can take advantage consistent number draws (always consider exposing individuals, susceptible ) avoid reseting PRNG recovery draw. also set PRNG vaccination. probably isn’t necessary: vaccination factor might change trajectories, differences trajectory prior considering vaccination. However, fragile arrangement. Adding interventions otherwise perturbing model assumptions easily change traversal PRNG result unmatched vaccinee selection. N.B., matched unmatched versions ’re generally overdrawing random number deviates. might possible reduce computational time fewer draws, entail either computational work (e.g. calculating eligible infection) convoluted data structures. plausible unmatched version, model complexity, likely become less practical increasing complexity.","code":"#' @param t an integer scalar, the simulation time #' @param y an integer vector, the individual states: S, I, R #' @param parameters a list, `transmission_p`, `recovery_p`, `vaccination_p`, #'   and `vax_t` #' @param salt an integer scalar, optional; if present, use hash-based matching identity_dStep <- function(t, y, parameters, salt = NULL) {   with(parameters, {     N <- length(y)     dY <- integer(N)     incI <- 0     # consider whether each infectious individual exposes susceptible     # individuals     infectable <- which(y == susceptible)     for (infector in which(y == infectious)) {       if (length(infectable)) {         if (!is.null(salt)) {           # if HBM, need to reseed RNG for each pair => draw           # easier to salt => draw all possible => slice relevant           hash_seed(salt, \"inf\", infector, t)           infectees <- infectable[             (runif(tail(infectable, 1)) < transmission_p)[infectable]           ]         } else {           infectees <- sample(             infectable, rbinom(1, length(infectable), transmission_p)           )         }         dY[infectees] <- 1         infectable <- setdiff(infectable, infectees)         # if this infector would recovery, indicate 2 => 3 transition         if (runif(1) < recovery_p) dY[infector] <- 1       }     }      incI <- sum((dY == 1) & (y != infectious))      # if its time for vaccination     if (t == vax_t) {       if (!is.null(salt)) {         # if HBM, need to reseed for each individual         # include the t here - what if the model changed vax_t?         psalt <- hash_seed(salt, \"vax\", t)         vaccinees <- infectable[           (runif(tail(infectable, 1)) < vaccination_p)[infectable]         ]       } else {         vaccinees <- sample(           infectable, rbinom(1, length(infectable), vaccination_p)         )       }       # for people still susceptible, indicate 1 => 3 transition       dY[vaccinees] <- 2     }      return(list(dY, incI))   }) }"},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"comparison","dir":"Articles","previous_headings":"","what":"Comparison","title":"Hash-based Matched Pseudo-Random Number Generation","text":"Let’s run simulation population 4000 individuals, 75 time steps, 500 samples. ’ll consider small amount vaccination - 3.3%. want assess cumulative averted incidence scenario compared vaccination. “non-matching” version, still match random number seeds; refer seed-matched-, SMO. model starts vaccination delay, still see absolutely identical outcomes SMO point. However, point, RNG see different traversal. ’re going discard outcomes epidemic dies prior vaccination. debate-worthy choice - e.g. want understand potential benefit purchasing program, include possibility unnecessary. model world, however, sort considerations apply equally either HBM SMO, want focus ability resolve intervention impact epidemic. Hence, discard outcomes.","code":"# setup parameters samplen <- 500L pop <- 4000L maxt <- 75L initI <- 5L ps <- list(   transmission_p = 1 - exp(-0.78 / pop),   # ~ 0.78 infections produced per day in fully susceptible pop   recovery_p = 1 - exp(-0.44) # ~ 2.3 days infectious   # implies R0 ~ 1.8 ) # non-intervention, set vax_t < 0 nonps <- c(ps, list(   vax_t = -1, vaccination_p = NA )) # intervention, vax_t == 10, 3.3% chance to happen intps <- c(ps, list(   vax_t = 10, vaccination_p = 0.033 )) # create populations yinit <- rep.int(susceptible, pop) yinit[1:initI] <- infectious yinit_nonid <- c(pop - initI, initI, 0L)  stepper <- function(     maxtime = maxt, y0,     dFUN, pars, seed, HBM) {   # if not HBM & a seed provided => SMO => set initial seeding   if (!missing(seed) && !HBM) set.seed(seed)    # reserve data structure   res <- integer(maxtime + 1)   res[1] <- 1   y <- y0   # run the simulation   for (i in seq_len(maxtime)) {     dY <- if (HBM) dFUN(i, y, pars, seed) else dFUN(i, y, pars)     y <- y + dY[[1]]     res[i + 1] <- dY[[2]]   }    return(res) }"},{"path":"hashprng.epinowcast.org/dev/articles/hashprng.html","id":"sampling","dir":"Articles","previous_headings":"","what":"Sampling","title":"Hash-based Matched Pseudo-Random Number Generation","text":"Now run samples, using plain sample ID SMO seed HBM salt, models. Timings: Now compute difference series, determine drop: … lastly, visualize ","code":"set.seed(8675309) nonid_no_match <- system.time(   ni_non_dt <- seq_len(samplen) |> parallel::mclapply(function(seed) {     data.table(       type = \"NON\", model = \"nonID\",       not_i = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = nonps, HBM = FALSE       )),       withi = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = intps, HBM = FALSE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  set.seed(8675309) id_no_match <- system.time(   wi_non_dt <- seq_len(samplen) |> parallel::mclapply(function(seed) {     data.table(       type = \"NON\", model = \"ID\",       not_i = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = nonps, HBM = FALSE       )),       withi = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = intps, HBM = FALSE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  nonid_seed_match_only <- system.time(   ni_smo_dt <- seq_len(samplen) |> parallel::mclapply(function(seed) {     data.table(       type = \"SMO\", model = \"nonID\",       not_i = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = nonps, seed = seed, HBM = FALSE       )),       withi = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = intps, seed = seed, HBM = FALSE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  id_seed_match_only <- system.time(   wi_smo_dt <- seq_len(samplen) |> parallel::mclapply(function(seed) {     data.table(       type = \"SMO\", model = \"ID\",       not_i = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = nonps, seed = seed, HBM = FALSE       )),       withi = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = intps, seed = seed, HBM = FALSE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  nonid_hash_based_matching <- system.time(   ni_hbm_dt <- seq_len(samplen) |> mclapply(function(seed) {     data.table(       type = \"HBM\", model = \"nonID\",       not_i = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = nonps, seed = seed, HBM = TRUE       )),       withi = cumsum(stepper(         y0 = yinit_nonid, dFUN = nonidentity_dStep, pars = intps, seed = seed, HBM = TRUE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  id_hash_based_matching <- system.time(   wi_hbm_dt <- seq_len(samplen) |> mclapply(function(seed) {     data.table(       type = \"HBM\", model = \"ID\",       not_i = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = nonps, seed = seed, HBM = TRUE       )),       withi = cumsum(stepper(         y0 = yinit, dFUN = identity_dStep, pars = intps, seed = seed, HBM = TRUE       ))     )   }, mc.cores = 5) |> rbindlist(idcol = \"sample\") )  sampledt <- rbind(ni_non_dt, wi_non_dt, ni_smo_dt, wi_smo_dt, ni_hbm_dt, wi_hbm_dt) sampledt[, averted := not_i - withi] sampledt[, time := seq_len(.N) - 1L, by = .(type, model, sample)] keepers <- sampledt[, .(keep = not_i[intps$vax_t + 1L] != not_i[.N]), by = .(type, model, sample)] keepers[, sum(keep) / .N, by = .(model, type)]  reduced_dt <- sampledt[keepers, on = .(type, model, sample)][keep == TRUE]  qtiled_dt <- reduced_dt[,   {     qs <- quantile(averted, probs = c(0.25, 0.5, 0.75))     .(lo = qs[1], md = qs[2], hi = qs[3])   },   by = .(type, model, time) ]"},{"path":"hashprng.epinowcast.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Pearson. Author, maintainer.","code":""},{"path":"hashprng.epinowcast.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pearson C (2023). hashprng: Hash-Based Matching Pseudo-Random Number Generation. R package version 0.3.0.1000.","code":"@Manual{,   title = {hashprng: Hash-Based Matching Pseudo-Random Number Generation},   author = {Carl Pearson},   year = {2023},   note = {R package version 0.3.0.1000}, }"},{"path":"hashprng.epinowcast.org/dev/index.html","id":"hash-based-matching-pseudo-random-number-generation-","dir":"","previous_headings":"","what":"Hash-Based Matching Pseudo-Random Number Generation","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"Helper functions use hash-based matching (HBM) pseudo-random number generation (PRNG) stochastic simulations. HBM-PRNG approach simplify matching synthetic experiment samples, ensures matched runs different focal parameters, chance events.","code":""},{"path":"hashprng.epinowcast.org/dev/index.html","id":"getting-started-and-learning-more","dir":"","previous_headings":"","what":"Getting started and learning more","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"README good place get started hashprng, particular following installation quick start sections. make use package, problem requires richer feature set presented , also provide range reosources. Package website: includes function reference, model outline, case studies making use package. site refers release version package. development version documentation (corresponding main branch GitHub) available .","code":""},{"path":[]},{"path":"hashprng.epinowcast.org/dev/index.html","id":"installing-the-package","dir":"","previous_headings":"Installation","what":"Installing the package","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"Install development version (whilst strive limit breaking changes introduction bugs development version may contain ) GitHub using following,","code":"remotes::install_github(\"epinowcast/hashprng\", dependencies = TRUE)"},{"path":"hashprng.epinowcast.org/dev/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"quick start …","code":""},{"path":"hashprng.epinowcast.org/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"use hashprng work, please consider citing using following,","code":"#> Warning in citation(\"hashprng\"): no date field in DESCRIPTION file of package #> 'hashprng' #> Warning in citation(\"hashprng\"): could not determine year for 'hashprng' from #> package DESCRIPTION file #>  #> To cite package 'hashprng' in publications use: #>  #>   Pearson C (????). _hashprng: Hash-Based Matching Pseudo-Random Number #>   Generation_. R package version 0.2.0.1000. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {hashprng: Hash-Based Matching Pseudo-Random Number Generation}, #>     author = {Carl Pearson}, #>     note = {R package version 0.2.0.1000}, #>   }"},{"path":"hashprng.epinowcast.org/dev/index.html","id":"how-to-make-a-bug-report-or-feature-request","dir":"","previous_headings":"","what":"How to make a bug report or feature request","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"Please briefly describe problem output expect issue. question, please don’t open issue. Instead, ask Q page. See contributing guide information.","code":""},{"path":"hashprng.epinowcast.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"welcome contributions new contributors! particularly appreciate help priority problems issues. Please check add issues, /add pull request. See contributing guide information.","code":""},{"path":"hashprng.epinowcast.org/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Hash-Based Matching Pseudo-Random Number Generation","text":"Please note hashprng project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"hashprng.epinowcast.org/dev/reference/hash_seed.html","id":null,"dir":"Reference","previous_headings":"","what":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","title":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","text":"Hash-Based Matching Pseudo-Random Number Generation","code":""},{"path":"hashprng.epinowcast.org/dev/reference/hash_seed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","text":"","code":"hash_seed(salt, ...)  hash_salt(salt, ...)"},{"path":"hashprng.epinowcast.org/dev/reference/hash_seed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","text":"salt matching value particular collection simulations ... distinguishing features identify event; see details.","code":""},{"path":"hashprng.epinowcast.org/dev/reference/hash_seed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","text":"functions provide convenient invocation hash-based matching pseudo-random generation (HBM-PRNG). hash_seed uses salt value along distinguishing features event. Typically, salt distinguishes overall sample simulation, can also temporarily computed value events share --features. hash_salt computes partial hash, several events need draws, share partially consistent feature set. result hash_salt can consistent features can computed , provided hash_seed along remaining distinct features. matched stochastic simulation, desire properties: random events resolved consistently possibility different stochastic samples reproducibility pseudo-random simulations Traditional PRNG seeding provides latter points. extent PRNG traversed way across simulations, events also resolved consistently. However, event resolution leads diverging outcomes (whole point otherwise-matched simulations parameter varying), overall trajectory simulation begin exercise PRNG differently. different events occur samples, matter - one random deviate good another. However, diverging trajectories can still share events. events resolved consistently: example, probabilistic threshold increasing across scenarios, particular event testing change pass fail. practice, means events need PRNG draws, possible PRNG state otherwise diverged due parts simulation. HBM PRNG approach encodes events (defined simulation), create identical hashes, used set PRNG state. ensure subsequent draws event.","code":""},{"path":"hashprng.epinowcast.org/dev/reference/hash_seed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hash-Based Matching Pseudo-Random Number Generation — hash_seed","text":"","code":"salt <- 8675309 evt <- list(type = \"infection\", from = 1, to = 2, time = 3.1) evt2 <- list(type = \"recovery\", from = 1, to = 2, time = 3.1) salt |> hash_seed(evt$type, evt$from, evt$to, evt$time) print(runif(10)) #>  [1] 0.4282151870 0.0632215929 0.0813261368 0.9317613035 0.8188156663 #>  [6] 0.2199115756 0.1473409482 0.5801623734 0.0002066612 0.4696494299 print(runif(10)) #>  [1] 0.10914618 0.53921462 0.54795937 0.79914916 0.17098160 0.71468689 #>  [7] 0.55110744 0.51945499 0.01689139 0.11398212 salt |> hash_seed(evt$type, evt$from, evt$to, evt$time) print(runif(10)) #>  [1] 0.4282151870 0.0632215929 0.0813261368 0.9317613035 0.8188156663 #>  [6] 0.2199115756 0.1473409482 0.5801623734 0.0002066612 0.4696494299 salt <- 42 salt |> hash_seed(evt$type, evt$from, evt$to, evt$time) print(runif(10)) #>  [1] 0.65849122 0.52118664 0.01567331 0.53579509 0.28385360 0.98761759 #>  [7] 0.35847539 0.05703028 0.68919263 0.92891680"},{"path":"hashprng.epinowcast.org/dev/reference/hashprng.html","id":null,"dir":"Reference","previous_headings":"","what":"hashprng: Hash-Based Matching Pseudo-Random Number Generation — hashprng","title":"hashprng: Hash-Based Matching Pseudo-Random Number Generation — hashprng","text":"hashprng package provides single function use stochastic simulation streamline salting + event hashing + reseeding R random number generator. sole function package hash_seed.","code":""},{"path":[]},{"path":"hashprng.epinowcast.org/dev/news/index.html","id":"hashprng-020","dir":"Changelog","previous_headings":"","what":"hashprng 0.2.0","title":"hashprng 0.2.0","text":"Added GitHub Actions CI Added NEWS.md file track changes package. Added CODE_OF_CONDUCT.md. Added CONTRIBUTING.md. Added linting GitHub workflow check . Added GitHub workflow deploy package documentation Added pkgdown generate package documentation website Added package README.","code":""},{"path":"hashprng.epinowcast.org/dev/news/index.html","id":"hashprng-010","dir":"Changelog","previous_headings":"","what":"hashprng 0.1.0","title":"hashprng 0.1.0","text":"Initial package version","code":""}]
